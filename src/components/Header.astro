---
// No Astro props for now; you can add props for link labels or painting count later
// Get the current path to determine initial focus
const currentPath = Astro.url.pathname;
import Lightbox from './Lightbox.astro';

// Define paintings array at the top level so it's available in both markup and script
const paintings = [
  {
    url: '/images/n/painting1.png',
    title: 'Home',
    slug: 'home',
    description: 'Welcome to our gallery',
    images: [
      '/images/n/painting2.png',
      '/images/n/painting3.png',
      '/images/n/painting4.png',
    ],
    sub: [
      {
        type: 'title',
        text: 'This is a title',
      },
      {
        type: 'text',
        text: 'This is an example of a long text that can be used to describe the painting. It can be used to describe the painting in more detail and provide more information about the painting.',
      },
      {
        type: 'image',
        image: '/images/n/painting1.png',
      },
      {
        type: 'link',
        text: 'Link',
        icon: '/images/n/painting1.png',
        url: '/images/n/painting1.png',
      }

    ]
  },
  {
    url: '/images/n/painting3.png',
    title: 'About',
    slug: 'about',
    description: 'Learn about us'
  },
  {
    url: '/images/n/painting2.png',
    title: 'Gallery',
    slug: 'gallery',
    description: 'Our collection of works',
    images: [
      '/images/n/painting1.png',
      '/images/n/painting3.png',
      '/images/n/painting4.png',
    ]
  },
  {
    url: '/images/n/painting4.png',
    title: 'Contact',
    slug: 'contact',
    description: 'Get in touch'
  }
];
---
<style>
.header-3d {
  position: relative;
  width: 100vw;
  height: 100vh;
  overflow: hidden;
  margin: 0;
  padding: 0;
  background: #000;
}
#room3d-container {
  width: 100%;
  height: 100%;
}
.header-links {
  position: absolute;
  left: 0;
  right: 0;
  bottom: 0;
  display: flex;
  justify-content: center;
  gap: 2rem;
  padding: 2rem 0;
  background: linear-gradient(to top, rgba(0,0,0,0.85) 60%, rgba(0,0,0,0));
  z-index: 2;
}
.header-link {
  font-size: 1.5rem;
  color: #fff;
  text-decoration: none;
  cursor: pointer;
  transition: color 0.2s;
}
.header-link:hover {
  color: #0077ff;
}
.header-link.focused {
  color: #0077ff;
  text-decoration: underline;
}
</style>

<div class="header-3d" data-initial-path={currentPath}>
  <div id="room3d-container" data-paintings={JSON.stringify(paintings)}></div>
  <nav class="header-links">
    {paintings.map((painting, index) => (
      <a 
        class="header-link" 
        data-painting={index} 
        href={`/${painting.slug}`}
      >
        {painting.title}
      </a>
    ))}
  </nav>
</div>
<Lightbox />

<script type="module" is:inline>
  import Room3D from '/scripts/Room3D.js';
  let room3d;
  let focusedPaintingId = null;
  
  // Get paintings data from the data attribute
  const container = document.getElementById('room3d-container');
  const paintings = JSON.parse(container.dataset.paintings);

  // Helper function to handle painting/link clicks
  function handlePaintingClick(paintingId, imageIndex = 0) {
    const link = document.querySelector(`.header-link[data-painting="${paintingId}"]`);
    if (!link) return;

    if (focusedPaintingId === paintingId) {
      // When clicking on a focused painting or its additional images, open it in the lightbox
      const painting = paintings[paintingId];
      if (painting && window.lightboxFunctions) {
        // Pass both the main image and additional images if available
        window.lightboxFunctions.openLightbox(
          painting.url,
          painting.images || [],
          imageIndex // Pass the image index to show the clicked image
        );
      }
    } else {
      // Clicking a different painting - focus on it
      if (focusedPaintingId !== null) {
        // Remove focus from previously focused link
        document.querySelector(`.header-link[data-painting="${focusedPaintingId}"]`)
          ?.classList.remove('focused');
      }
      focusedPaintingId = paintingId;
      link.classList.add('focused');
      room3d.focusOnPainting(paintingId);
      const href = link.getAttribute('href');
      // Update URL without page reload
      window.history.pushState({}, '', href);
    }
  }

  // Helper function to focus on a painting based on path
  function focusFromPath(path) {
    // Remove leading slash for comparison with slugs
    const currentSlug = path === '/' ? '' : path.substring(1);
    
    // Find painting index by matching slug
    const paintingId = paintings.findIndex(painting => painting.slug === currentSlug);
    
    if (paintingId !== -1) {
      focusedPaintingId = paintingId;
      room3d.focusOnPainting(paintingId);
      // Update link styles
      document.querySelectorAll('.header-link').forEach(link => {
        link.classList.remove('focused');
        if (parseInt(link.getAttribute('data-painting')) === paintingId) {
          link.classList.add('focused');
        }
      });
    }
  }

  // Helper function to handle link clicks
  function handleLinkClick(paintingId) {
    const link = document.querySelector(`.header-link[data-painting="${paintingId}"]`);
    if (!link) return;

    if (focusedPaintingId === paintingId) {
      // Clicking the focused link - unfocus
      focusedPaintingId = null;
      link.classList.remove('focused');
      room3d.resetCamera();
      // Update URL to root when unfocusing
      window.history.pushState({}, '', '/');
    } else {
      // Clicking a different link - focus on it
      if (focusedPaintingId !== null) {
        document.querySelector(`.header-link[data-painting="${focusedPaintingId}"]`)
          ?.classList.remove('focused');
      }
      focusedPaintingId = paintingId;
      link.classList.add('focused');
      room3d.focusOnPainting(paintingId);
      const href = link.getAttribute('href');
      window.history.pushState({}, '', href);
    }
  }

  window.addEventListener('DOMContentLoaded', () => {
    const container = document.getElementById('room3d-container');
    if (!container) return;
    
    // Get initial path
    const headerElement = document.querySelector('.header-3d');
    const initialPath = headerElement.getAttribute('data-initial-path');
    
    // Initialize Room3D with ready callback
    room3d = new Room3D(container, paintings, () => {
      // Focus on initial painting once everything is loaded
      focusFromPath(initialPath);
    });

    // Set up painting click handler
    room3d.setOnPaintingClick(handlePaintingClick);
    
    // Link hover and click events
    document.querySelectorAll('.header-link').forEach(link => {
      const paintingId = parseInt(link.getAttribute('data-painting'));
      
      // Handle hover events only if not currently focused
      link.addEventListener('mouseenter', () => {
        if (!isNaN(paintingId) && focusedPaintingId === null) {
          room3d.focusOnPainting(paintingId);
        }
      });
      
      link.addEventListener('mouseleave', () => {
        if (!isNaN(paintingId) && focusedPaintingId === null) {
          room3d.resetCamera();
        }
      });

      // Handle click events
      link.addEventListener('click', (e) => {
        e.preventDefault();
        if (!isNaN(paintingId)) {
          handleLinkClick(paintingId);
        }
      });
    });

    // Handle browser back/forward buttons
    window.addEventListener('popstate', () => {
      focusFromPath(window.location.pathname);
    });
  });
</script>
